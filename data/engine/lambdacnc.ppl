Pipeline
  { info = "generated by lambdacube-compiler 0.0.1"
  , backend = OpenGL33
  , textures =
      [ TextureDescriptor
          { textureType = Texture2D (FloatT Red) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Depth
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = Repeat
                , samplerWrapT = Just Repeat
                , samplerWrapR = Nothing
                , samplerMinFilter = Nearest
                , samplerMagFilter = Nearest
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT RGBA) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Color
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = Repeat
                , samplerWrapT = Just Repeat
                , samplerWrapR = Nothing
                , samplerMinFilter = Nearest
                , samplerMagFilter = Nearest
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT Red) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Depth
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = ClampToEdge
                , samplerWrapT = Just ClampToEdge
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT RGBA) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Color
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = ClampToEdge
                , samplerWrapT = Just ClampToEdge
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT Red) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Depth
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = ClampToEdge
                , samplerWrapT = Just ClampToEdge
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT RGBA) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Color
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = ClampToEdge
                , samplerWrapT = Just ClampToEdge
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT Red) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Depth
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = ClampToEdge
                , samplerWrapT = Just ClampToEdge
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT RGBA) 1
          , textureSize = VV2U (V2 960 540)
          , textureSemantic = Color
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = ClampToEdge
                , samplerWrapT = Just ClampToEdge
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      ]
  , samplers = []
  , targets =
      [ RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth , targetRef = Just (Framebuffer Depth) }
              , TargetItem
                  { targetSemantic = Color , targetRef = Just (Framebuffer Color) }
              ]
          }
      , RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth
                  , targetRef = Just (TextureImage 0 0 Nothing)
                  }
              , TargetItem
                  { targetSemantic = Color
                  , targetRef = Just (TextureImage 1 0 Nothing)
                  }
              ]
          }
      , RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth
                  , targetRef = Just (TextureImage 2 0 Nothing)
                  }
              , TargetItem
                  { targetSemantic = Color
                  , targetRef = Just (TextureImage 3 0 Nothing)
                  }
              ]
          }
      , RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth
                  , targetRef = Just (TextureImage 4 0 Nothing)
                  }
              , TargetItem
                  { targetSemantic = Color
                  , targetRef = Just (TextureImage 5 0 Nothing)
                  }
              ]
          }
      , RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth
                  , targetRef = Just (TextureImage 6 0 Nothing)
                  }
              , TargetItem
                  { targetSemantic = Color
                  , targetRef = Just (TextureImage 7 0 Nothing)
                  }
              ]
          }
      ]
  , programs =
      [ Program
          { programUniforms =
              fromList [ ( "position" , V3F ) , ( "time" , Float ) ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position" , ty = V3F } )
                , ( "vi2" , Parameter { name = "normal" , ty = V3F } )
                ]
          , programInTextures = fromList []
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform vec3 position;
              uniform float time;
              in vec3 vi1;
              in vec3 vi2;
              smooth out float vo1;
              vec4 ext0_Float_3(vec3 z0) {
                  return vec4 ((z0).x,(z0).y,(z0).z,0.0);
              }
              vec3 neg_VecSFloat3(vec3 z0) {
                  return - (z0);
              }
              mat4 rotMatrixZ(float z0) {
                  return mat4 (vec4 (cos (z0),sin (z0),0.0,0.0)
                              ,vec4 ((0.0) - (sin (z0)),cos (z0),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              mat4 translateBefore4(vec3 z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,1.0,0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 ((z0).x,(z0).y,(z0).z,1.0));
              }
              float aspectRatio_Float_2_1(vec2 z0) {
                  return ((z0).x) / ((z0).y);
              }
              vec4 lightPos_Float(float z0) {
                  return (rotMatrixZ (2.356194490192345)) * (vec4 (80000.0,10000.0,40000.0,1.0));
              }
              mat4 lookat(vec3 z0,vec3 z1,vec3 z2) {
                  return (transpose (mat4 (ext0_Float_3 (normalize (cross (z2
                                                                          ,normalize ((z0) - (z1)))))
                                          ,ext0_Float_3 (cross (normalize ((z0) - (z1))
                                                               ,normalize (cross (z2,normalize ((z0) - (z1))))))
                                          ,ext0_Float_3 (normalize ((z0) - (z1)))
                                          ,vec4 (0.0,0.0,0.0,1.0)))) * (translateBefore4 (neg_VecSFloat3 (z0)));
              }
              mat4 orthographic(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 ((2.0) / (((z3) * (z2)) - ((0.0) - ((z3) * (z2))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0,(2.0) / ((z2) - ((0.0) - (z2))),0.0,0.0)
                              ,vec4 (0.0,0.0,(0.0) - ((2.0) / ((z1) - (z0))),0.0)
                              ,vec4
                              ((0.0) - ((((z3) * (z2)) + ((0.0) - ((z3) * (z2)))) / (((z3) * (z2)) - ((0.0) - ((z3) * (z2)))))
                              ,(0.0) - (((z2) + ((0.0) - (z2))) / ((z2) - ((0.0) - (z2))))
                              ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                              ,1.0));
              }
              mat4 lightMat_2_Float(vec2 z0,float z1) {
                  return (orthographic (3000.0
                                       ,300000.0
                                       ,50000.0
                                       ,aspectRatio_Float_2_1 (z0))) * (lookat ((lightPos_Float (z1)).xyz
                                                                               ,vec3 (0.0,0.0,0.0)
                                                                               ,vec3 (0.0,0.0,1.0)));
              }
              mat4 modelMat_Float(float z0) {
                  return mat4 (vec4 (cos (2.356194490192345),sin (2.356194490192345),0.0,0.0)
                              ,vec4 ((0.0) - (sin (2.356194490192345)),cos (2.356194490192345),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 positionObject_Float_3_3_Float(float z0,vec3 z1,vec3 z2) {
                  return (vec4 ((z2).x,(z2).y,(z2).z,1.0)) + (vec4 ((z1).x,(z1).y,(z1).z,0.0));
              }
              void main() {
                  gl_Position = (lightMat_2_Float (vec2 (960.0,540.0)
                                                  ,(time) / (10.0))) * ((modelMat_Float
                      ((time) / (10.0))) * (positionObject_Float_3_3_Float ((time) / (10.0)
                                                                           ,position
                                                                           ,vi1)));
                  vo1 = ((((lightMat_2_Float (vec2 (960.0,540.0)
                                             ,(time) / (10.0))) * ((modelMat_Float
                      ((time) / (10.0))) * (positionObject_Float_3_3_Float ((time) / (10.0)
                                                                           ,position
                                                                           ,vi1)))).z) * (0.5)) + (0.5);
              }
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              smooth in float vo1;
              out vec4 f0;
              void main() {
                  f0 = vec4 (vo1,vo1,vo1,1.0);
              }
              """
          }
      , Program
          { programUniforms = fromList []
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "attribute_0" , ty = V2F } )
                , ( "vi2" , Parameter { name = "attribute_1" , ty = V2F } )
                ]
          , programInTextures = fromList [ ( "s0" , FTexture2D ) ]
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              in vec2 vi1;
              in vec2 vi2;
              smooth out vec2 vo1;
              void main() {
                  gl_Position = vec4 ((vi1).x,(vi1).y,-1.0,1.0);
                  vo1 = vi2;
              }
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform sampler2D s0;
              smooth in vec2 vo1;
              out vec4 f0;
              void main() {
                  f0 = texture2D (s0,vo1);
              }
              """
          }
      , Program
          { programUniforms =
              fromList
                [ ( "diffuseTexture" , FTexture2D )
                , ( "position" , V3F )
                , ( "screenSize" , V2F )
                , ( "time" , Float )
                ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position" , ty = V3F } )
                , ( "vi2" , Parameter { name = "normal" , ty = V3F } )
                ]
          , programInTextures =
              fromList
                [ ( "diffuseTexture" , FTexture2D )
                , ( "s0" , FTexture2D )
                , ( "s1" , FTexture2D )
                , ( "s2" , FTexture2D )
                ]
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform vec3 position;
              uniform vec2 screenSize;
              uniform float time;
              in vec3 vi1;
              in vec3 vi2;
              smooth out vec4 vo1;
              smooth out vec4 vo2;
              smooth out vec3 vo3;
              smooth out vec4 vo4;
              vec4 ext0_Float_3(vec3 z0) {
                  return vec4 ((z0).x,(z0).y,(z0).z,0.0);
              }
              vec3 neg_VecSFloat3(vec3 z0) {
                  return - (z0);
              }
              mat4 rotMatrixZ(float z0) {
                  return mat4 (vec4 (cos (z0),sin (z0),0.0,0.0)
                              ,vec4 ((0.0) - (sin (z0)),cos (z0),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              mat4 translateBefore4(vec3 z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,1.0,0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 ((z0).x,(z0).y,(z0).z,1.0));
              }
              float aspectRatio_Float_2_1(vec2 z0) {
                  return ((z0).x) / ((z0).y);
              }
              vec4 lightPos_Float(float z0) {
                  return (rotMatrixZ (2.356194490192345)) * (vec4 (80000.0,10000.0,40000.0,1.0));
              }
              mat4 lookat(vec3 z0,vec3 z1,vec3 z2) {
                  return (transpose (mat4 (ext0_Float_3 (normalize (cross (z2
                                                                          ,normalize ((z0) - (z1)))))
                                          ,ext0_Float_3 (cross (normalize ((z0) - (z1))
                                                               ,normalize (cross (z2,normalize ((z0) - (z1))))))
                                          ,ext0_Float_3 (normalize ((z0) - (z1)))
                                          ,vec4 (0.0,0.0,0.0,1.0)))) * (translateBefore4 (neg_VecSFloat3 (z0)));
              }
              mat4 orthographic(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 ((2.0) / (((z3) * (z2)) - ((0.0) - ((z3) * (z2))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0,(2.0) / ((z2) - ((0.0) - (z2))),0.0,0.0)
                              ,vec4 (0.0,0.0,(0.0) - ((2.0) / ((z1) - (z0))),0.0)
                              ,vec4
                              ((0.0) - ((((z3) * (z2)) + ((0.0) - ((z3) * (z2)))) / (((z3) * (z2)) - ((0.0) - ((z3) * (z2)))))
                              ,(0.0) - (((z2) + ((0.0) - (z2))) / ((z2) - ((0.0) - (z2))))
                              ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                              ,1.0));
              }
              mat4 perspective(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 (((2.0) * (z0)) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0
                                    ,((2.0) * (z0)) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,0.0
                                    ,0.0)
                              ,vec4 ((((z3) * ((z0) * (tan ((z2) / (2.0))))) + ((0.0) - ((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))))) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,(((z0) * (tan ((z2) / (2.0)))) + ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0)))))) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                                    ,-1.0)
                              ,vec4 (0.0,0.0,(0.0) - ((((2.0) * (z1)) * (z0)) / ((z1) - (z0))),0.0));
              }
              mat4 cameraMat_2_Float(vec2 z0,float z1) {
                  return (perspective (3000.0
                                      ,300000.0
                                      ,0.5235987755982988
                                      ,aspectRatio_Float_2_1 (z0))) * (lookat (vec3 (0.0,180000.0,60000.0)
                                                                              ,vec3 (0.0,0.0,10000.0)
                                                                              ,vec3 (0.0,0.0,1.0)));
              }
              mat4 lightMat_2_Float(vec2 z0,float z1) {
                  return (orthographic (3000.0
                                       ,300000.0
                                       ,50000.0
                                       ,aspectRatio_Float_2_1 (z0))) * (lookat ((lightPos_Float (z1)).xyz
                                                                               ,vec3 (0.0,0.0,0.0)
                                                                               ,vec3 (0.0,0.0,1.0)));
              }
              mat4 modelMat_Float(float z0) {
                  return mat4 (vec4 (cos (2.356194490192345),sin (2.356194490192345),0.0,0.0)
                              ,vec4 ((0.0) - (sin (2.356194490192345)),cos (2.356194490192345),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 positionObject_Float_3_3_Float(float z0,vec3 z1,vec3 z2) {
                  return (vec4 ((z2).x,(z2).y,(z2).z,1.0)) + (vec4 ((z1).x,(z1).y,(z1).z,0.0));
              }
              void main() {
                  gl_Position = (cameraMat_2_Float (screenSize
                                                   ,(time) / (10.0))) * ((modelMat_Float
                      ((time) / (10.0))) * (positionObject_Float_3_3_Float ((time) / (10.0)
                                                                           ,position
                                                                           ,vi1)));
                  vo1 = (modelMat_Float ((time) / (10.0))) * (positionObject_Float_3_3_Float
                      ((time) / (10.0),position,vi1));
                  vo2 = (lightMat_2_Float (vec2 (960.0,540.0),(time) / (10.0))) * ((modelMat_Float
                      ((time) / (10.0))) * (positionObject_Float_3_3_Float ((time) / (10.0)
                                                                           ,position
                                                                           ,vi1)));
                  vo3 = (vi1) + (vec3 (24000.0,0.0,0.0));
                  vo4 = normalize ((modelMat_Float ((time) / (10.0))) * (vec4 ((vi2).x
                                                                              ,(vi2).y
                                                                              ,(vi2).z
                                                                              ,0.0)));
              }
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform sampler2D diffuseTexture;
              uniform sampler2D s0;
              uniform sampler2D s1;
              uniform sampler2D s2;
              uniform float time;
              smooth in vec4 vo1;
              smooth in vec4 vo2;
              smooth in vec3 vo3;
              smooth in vec4 vo4;
              out vec4 f0;
              mat4 rotMatrixZ(float z0) {
                  return mat4 (vec4 (cos (z0),sin (z0),0.0,0.0)
                              ,vec4 ((0.0) - (sin (z0)),cos (z0),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec3 diffuseLight_4_VecSFloat3(vec4 z0,vec4 z1,vec4 z2,vec3 z3) {
                  return (z3) * (max (dot (z1,normalize ((z2) - (z0))),0.0));
              }
              vec4 lightPos_Float(float z0) {
                  return (rotMatrixZ (2.356194490192345)) * (vec4 (80000.0,10000.0,40000.0,1.0));
              }
              void main() {
                  f0 = vec4 ((((diffuseLight_4_VecSFloat3 (vo1
                                                          ,vo4
                                                          ,lightPos_Float ((time) / (10.0))
                                                          ,vec3 (1.0,1.0,1.0))) * ((texture2D (diffuseTexture
                                                                                              ,((vo3).xy) * (2.5e-5))).xyz)) * ((((((((vo2).xyz) / ((vo2).w)) * (0.5)) + (0.5)).z) - (max
                            ((5.0e-2) * ((1.0) - (dot (vo4
                                                      ,normalize ((lightPos_Float ((time) / (10.0))) - (vo1)))))
                            ,5.0e-3))) > ((texture2D (s0
                                                     ,(((((vo2).xyz) / ((vo2).w)) * (0.5)) + (0.5)).xy)).x) ? 0.3 : 1.0)).x
                            ,(((diffuseLight_4_VecSFloat3 (vo1
                                                          ,vo4
                                                          ,lightPos_Float ((time) / (10.0))
                                                          ,vec3 (1.0,1.0,1.0))) * ((texture2D (diffuseTexture
                                                                                              ,((vo3).xy) * (2.5e-5))).xyz)) * ((((((((vo2).xyz) / ((vo2).w)) * (0.5)) + (0.5)).z) - (max
                            ((5.0e-2) * ((1.0) - (dot (vo4
                                                      ,normalize ((lightPos_Float ((time) / (10.0))) - (vo1)))))
                            ,5.0e-3))) > ((texture2D (s1
                                                     ,(((((vo2).xyz) / ((vo2).w)) * (0.5)) + (0.5)).xy)).x) ? 0.3 : 1.0)).y
                            ,(((diffuseLight_4_VecSFloat3 (vo1
                                                          ,vo4
                                                          ,lightPos_Float ((time) / (10.0))
                                                          ,vec3 (1.0,1.0,1.0))) * ((texture2D (diffuseTexture
                                                                                              ,((vo3).xy) * (2.5e-5))).xyz)) * ((((((((vo2).xyz) / ((vo2).w)) * (0.5)) + (0.5)).z) - (max
                            ((5.0e-2) * ((1.0) - (dot (vo4
                                                      ,normalize ((lightPos_Float ((time) / (10.0))) - (vo1)))))
                            ,5.0e-3))) > ((texture2D (s2
                                                     ,(((((vo2).xyz) / ((vo2).w)) * (0.5)) + (0.5)).xy)).x) ? 0.3 : 1.0)).z
                            ,1.0);
              }
              """
          }
      , Program
          { programUniforms =
              fromList
                [ ( "position" , V3F )
                , ( "screenSize" , V2F )
                , ( "time" , Float )
                ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position" , ty = V3F } )
                , ( "vi2" , Parameter { name = "normal" , ty = V3F } )
                ]
          , programInTextures = fromList []
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform vec3 position;
              uniform vec2 screenSize;
              uniform float time;
              in vec3 vi1;
              in vec3 vi2;
              smooth out vec4 vo1;
              smooth out vec4 vo2;
              smooth out vec3 vo3;
              smooth out vec4 vo4;
              vec4 ext0_Float_3(vec3 z0) {
                  return vec4 ((z0).x,(z0).y,(z0).z,0.0);
              }
              vec3 neg_VecSFloat3(vec3 z0) {
                  return - (z0);
              }
              mat4 rotMatrixZ(float z0) {
                  return mat4 (vec4 (cos (z0),sin (z0),0.0,0.0)
                              ,vec4 ((0.0) - (sin (z0)),cos (z0),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              mat4 translateBefore4(vec3 z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,1.0,0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 ((z0).x,(z0).y,(z0).z,1.0));
              }
              float aspectRatio_Float_2_1(vec2 z0) {
                  return ((z0).x) / ((z0).y);
              }
              vec4 lightPos_Float(float z0) {
                  return (rotMatrixZ (2.356194490192345)) * (vec4 (80000.0,10000.0,40000.0,1.0));
              }
              mat4 lookat(vec3 z0,vec3 z1,vec3 z2) {
                  return (transpose (mat4 (ext0_Float_3 (normalize (cross (z2
                                                                          ,normalize ((z0) - (z1)))))
                                          ,ext0_Float_3 (cross (normalize ((z0) - (z1))
                                                               ,normalize (cross (z2,normalize ((z0) - (z1))))))
                                          ,ext0_Float_3 (normalize ((z0) - (z1)))
                                          ,vec4 (0.0,0.0,0.0,1.0)))) * (translateBefore4 (neg_VecSFloat3 (z0)));
              }
              mat4 orthographic(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 ((2.0) / (((z3) * (z2)) - ((0.0) - ((z3) * (z2))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0,(2.0) / ((z2) - ((0.0) - (z2))),0.0,0.0)
                              ,vec4 (0.0,0.0,(0.0) - ((2.0) / ((z1) - (z0))),0.0)
                              ,vec4
                              ((0.0) - ((((z3) * (z2)) + ((0.0) - ((z3) * (z2)))) / (((z3) * (z2)) - ((0.0) - ((z3) * (z2)))))
                              ,(0.0) - (((z2) + ((0.0) - (z2))) / ((z2) - ((0.0) - (z2))))
                              ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                              ,1.0));
              }
              mat4 perspective(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 (((2.0) * (z0)) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0
                                    ,((2.0) * (z0)) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,0.0
                                    ,0.0)
                              ,vec4 ((((z3) * ((z0) * (tan ((z2) / (2.0))))) + ((0.0) - ((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))))) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,(((z0) * (tan ((z2) / (2.0)))) + ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0)))))) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                                    ,-1.0)
                              ,vec4 (0.0,0.0,(0.0) - ((((2.0) * (z1)) * (z0)) / ((z1) - (z0))),0.0));
              }
              mat4 cameraMat_2_Float(vec2 z0,float z1) {
                  return (perspective (3000.0
                                      ,300000.0
                                      ,0.5235987755982988
                                      ,aspectRatio_Float_2_1 (z0))) * (lookat (vec3 (0.0,180000.0,60000.0)
                                                                              ,vec3 (0.0,0.0,10000.0)
                                                                              ,vec3 (0.0,0.0,1.0)));
              }
              mat4 lightMat_2_Float(vec2 z0,float z1) {
                  return (orthographic (3000.0
                                       ,300000.0
                                       ,50000.0
                                       ,aspectRatio_Float_2_1 (z0))) * (lookat ((lightPos_Float (z1)).xyz
                                                                               ,vec3 (0.0,0.0,0.0)
                                                                               ,vec3 (0.0,0.0,1.0)));
              }
              mat4 modelMat_Float(float z0) {
                  return mat4 (vec4 (cos (2.356194490192345),sin (2.356194490192345),0.0,0.0)
                              ,vec4 ((0.0) - (sin (2.356194490192345)),cos (2.356194490192345),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 positionObject_Float_3_3_Float(float z0,vec3 z1,vec3 z2) {
                  return (vec4 ((z2).x,(z2).y,(z2).z,1.0)) + (vec4 ((z1).x,(z1).y,(z1).z,0.0));
              }
              void main() {
                  gl_Position = (cameraMat_2_Float (screenSize
                                                   ,(time) / (10.0))) * ((modelMat_Float
                      ((time) / (10.0))) * (positionObject_Float_3_3_Float ((time) / (10.0)
                                                                           ,position
                                                                           ,vi1)));
                  vo1 = (modelMat_Float ((time) / (10.0))) * (positionObject_Float_3_3_Float
                      ((time) / (10.0),position,vi1));
                  vo2 = (lightMat_2_Float (vec2 (960.0,540.0),(time) / (10.0))) * ((modelMat_Float
                      ((time) / (10.0))) * (positionObject_Float_3_3_Float ((time) / (10.0)
                                                                           ,position
                                                                           ,vi1)));
                  vo3 = (vi1) + (vec3 (24000.0,0.0,0.0));
                  vo4 = normalize ((modelMat_Float ((time) / (10.0))) * (vec4 ((vi2).x
                                                                              ,(vi2).y
                                                                              ,(vi2).z
                                                                              ,0.0)));
              }
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              smooth in vec4 vo1;
              smooth in vec4 vo2;
              smooth in vec3 vo3;
              smooth in vec4 vo4;
              out vec4 f0;
              void main() {
                  f0 = vec4 (0.0,0.0,0.0,0.5);
              }
              """
          }
      , Program
          { programUniforms =
              fromList [ ( "screenSize" , V2F ) , ( "time" , Float ) ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position" , ty = V3F } )
                , ( "vi2" , Parameter { name = "normal" , ty = V3F } )
                ]
          , programInTextures = fromList []
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform vec2 screenSize;
              uniform float time;
              in vec3 vi1;
              in vec3 vi2;
              smooth out vec3 vo1;
              vec4 ext0_Float_3(vec3 z0) {
                  return vec4 ((z0).x,(z0).y,(z0).z,0.0);
              }
              vec3 neg_VecSFloat3(vec3 z0) {
                  return - (z0);
              }
              mat4 translateBefore4(vec3 z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,1.0,0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 ((z0).x,(z0).y,(z0).z,1.0));
              }
              float aspectRatio_Float_2_1(vec2 z0) {
                  return ((z0).x) / ((z0).y);
              }
              mat4 lookat(vec3 z0,vec3 z1,vec3 z2) {
                  return (transpose (mat4 (ext0_Float_3 (normalize (cross (z2
                                                                          ,normalize ((z0) - (z1)))))
                                          ,ext0_Float_3 (cross (normalize ((z0) - (z1))
                                                               ,normalize (cross (z2,normalize ((z0) - (z1))))))
                                          ,ext0_Float_3 (normalize ((z0) - (z1)))
                                          ,vec4 (0.0,0.0,0.0,1.0)))) * (translateBefore4 (neg_VecSFloat3 (z0)));
              }
              mat4 perspective(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 (((2.0) * (z0)) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0
                                    ,((2.0) * (z0)) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,0.0
                                    ,0.0)
                              ,vec4 ((((z3) * ((z0) * (tan ((z2) / (2.0))))) + ((0.0) - ((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))))) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,(((z0) * (tan ((z2) / (2.0)))) + ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0)))))) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                                    ,-1.0)
                              ,vec4 (0.0,0.0,(0.0) - ((((2.0) * (z1)) * (z0)) / ((z1) - (z0))),0.0));
              }
              mat4 rotMatrixZ(float z0) {
                  return mat4 (vec4 (cos (z0),sin (z0),0.0,0.0)
                              ,vec4 ((0.0) - (sin (z0)),cos (z0),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 bulbOffset_Float;
              mat4 cameraMat_2_Float(vec2 z0,float z1) {
                  return (perspective (3000.0
                                      ,300000.0
                                      ,0.5235987755982988
                                      ,aspectRatio_Float_2_1 (z0))) * (lookat (vec3 (0.0,180000.0,60000.0)
                                                                              ,vec3 (0.0,0.0,10000.0)
                                                                              ,vec3 (0.0,0.0,1.0)));
              }
              vec4 lightPos_Float(float z0) {
                  return (rotMatrixZ (2.356194490192345)) * (vec4 (80000.0,10000.0,40000.0,1.0));
              }
              mat4 rotMatrixX(float z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,cos (z0),sin (z0),0.0)
                              ,vec4 (0.0,(0.0) - (sin (z0)),cos (z0),0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 scale(float z0,vec4 z1) {
                  return (z1) * (vec4 (z0,z0,z0,1.0));
              }
              void main() {
                  bulbOffset_Float = vec4 (0.0,0.0,4200.0,0.0);
                  gl_Position = (cameraMat_2_Float (screenSize,(time) / (10.0))) * ((((rotMatrixX
                      (-1.5707963267948966)) * (scale (200.0
                                                      ,vec4 ((vi1).x,(vi1).y,(vi1).z,0.0)))) + (lightPos_Float
                      ((time) / (10.0)))) + (bulbOffset_Float));
                  vo1 = vi2;
              }
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              smooth in vec3 vo1;
              out vec4 f0;
              vec4 white;
              void main() {
                  white = vec4 (1.0,1.0,1.0,1.0);
                  f0 = white;
              }
              """
          }
      , Program
          { programUniforms =
              fromList [ ( "screenSize" , V2F ) , ( "time" , Float ) ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position" , ty = V3F } )
                , ( "vi2" , Parameter { name = "normal" , ty = V3F } )
                ]
          , programInTextures = fromList []
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              uniform vec2 screenSize;
              uniform float time;
              in vec3 vi1;
              in vec3 vi2;
              smooth out vec3 vo1;
              vec4 ext0_Float_3(vec3 z0) {
                  return vec4 ((z0).x,(z0).y,(z0).z,0.0);
              }
              vec3 neg_VecSFloat3(vec3 z0) {
                  return - (z0);
              }
              mat4 translateBefore4(vec3 z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,1.0,0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 ((z0).x,(z0).y,(z0).z,1.0));
              }
              float aspectRatio_Float_2_1(vec2 z0) {
                  return ((z0).x) / ((z0).y);
              }
              mat4 lookat(vec3 z0,vec3 z1,vec3 z2) {
                  return (transpose (mat4 (ext0_Float_3 (normalize (cross (z2
                                                                          ,normalize ((z0) - (z1)))))
                                          ,ext0_Float_3 (cross (normalize ((z0) - (z1))
                                                               ,normalize (cross (z2,normalize ((z0) - (z1))))))
                                          ,ext0_Float_3 (normalize ((z0) - (z1)))
                                          ,vec4 (0.0,0.0,0.0,1.0)))) * (translateBefore4 (neg_VecSFloat3 (z0)));
              }
              mat4 perspective(float z0,float z1,float z2,float z3) {
                  return mat4 (vec4 (((2.0) * (z0)) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,0.0
                                    ,0.0
                                    ,0.0)
                              ,vec4 (0.0
                                    ,((2.0) * (z0)) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,0.0
                                    ,0.0)
                              ,vec4 ((((z3) * ((z0) * (tan ((z2) / (2.0))))) + ((0.0) - ((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))))) / (((z3) * ((z0) * (tan
                                    ((z2) / (2.0))))) - ((0.0) - ((z3) * ((z0) * (tan ((z2) / (2.0)))))))
                                    ,(((z0) * (tan ((z2) / (2.0)))) + ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0)))))) / (((z0) * (tan ((z2) / (2.0)))) - ((0.0) - ((z0) * (tan
                                    ((z2) / (2.0))))))
                                    ,(0.0) - (((z1) + (z0)) / ((z1) - (z0)))
                                    ,-1.0)
                              ,vec4 (0.0,0.0,(0.0) - ((((2.0) * (z1)) * (z0)) / ((z1) - (z0))),0.0));
              }
              mat4 rotMatrixZ(float z0) {
                  return mat4 (vec4 (cos (z0),sin (z0),0.0,0.0)
                              ,vec4 ((0.0) - (sin (z0)),cos (z0),0.0,0.0)
                              ,vec4 (0.0,0.0,1.0,0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 bulbOffset_Float;
              mat4 cameraMat_2_Float(vec2 z0,float z1) {
                  return (perspective (3000.0
                                      ,300000.0
                                      ,0.5235987755982988
                                      ,aspectRatio_Float_2_1 (z0))) * (lookat (vec3 (0.0,180000.0,60000.0)
                                                                              ,vec3 (0.0,0.0,10000.0)
                                                                              ,vec3 (0.0,0.0,1.0)));
              }
              vec4 lightPos_Float(float z0) {
                  return (rotMatrixZ (2.356194490192345)) * (vec4 (80000.0,10000.0,40000.0,1.0));
              }
              mat4 rotMatrixX(float z0) {
                  return mat4 (vec4 (1.0,0.0,0.0,0.0)
                              ,vec4 (0.0,cos (z0),sin (z0),0.0)
                              ,vec4 (0.0,(0.0) - (sin (z0)),cos (z0),0.0)
                              ,vec4 (0.0,0.0,0.0,1.0));
              }
              vec4 scale(float z0,vec4 z1) {
                  return (z1) * (vec4 (z0,z0,z0,1.0));
              }
              void main() {
                  bulbOffset_Float = vec4 (0.0,0.0,4200.0,0.0);
                  gl_Position = (cameraMat_2_Float (screenSize,(time) / (10.0))) * ((((rotMatrixX
                      (-1.5707963267948966)) * (scale (200.0
                                                      ,vec4 ((vi1).x,(vi1).y,(vi1).z,0.0)))) + (lightPos_Float
                      ((time) / (10.0)))) + (bulbOffset_Float));
                  vo1 = vi2;
              }
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s,vec2 uv) {
                  return texture(s,uv);
              }
              smooth in vec3 vo1;
              out vec4 f0;
              vec4 black;
              void main() {
                  black = vec4 (0.0,0.0,0.0,1.0);
                  f0 = black;
              }
              """
          }
      ]
  , slots =
      [ Slot
          { slotName = "objects"
          , slotStreams =
              fromList [ ( "normal" , V3F ) , ( "position" , V3F ) ]
          , slotUniforms =
              fromList
                [ ( "diffuseTexture" , FTexture2D )
                , ( "position" , V3F )
                , ( "screenSize" , V2F )
                , ( "time" , Float )
                ]
          , slotPrimitive = Triangles
          , slotPrograms = [ 0 , 0 , 0 , 0 , 2 , 3 ]
          }
      , Slot
          { slotName = "lights"
          , slotStreams =
              fromList [ ( "normal" , V3F ) , ( "position" , V3F ) ]
          , slotUniforms =
              fromList [ ( "screenSize" , V2F ) , ( "time" , Float ) ]
          , slotPrimitive = Triangles
          , slotPrograms = [ 4 , 5 ]
          }
      ]
  , streams =
      [ StreamData
          { streamData =
              fromList
                [ ( "attribute_0"
                  , VFloatArray
                      [ -1.0
                      , -1.0
                      , -0.5
                      , -0.5
                      , -1.0
                      , -0.5
                      , -1.0
                      , -1.0
                      , -0.5
                      , -1.0
                      , -0.5
                      , -0.5
                      ]
                  )
                , ( "attribute_1"
                  , VFloatArray
                      [ 0.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 1.0
                      ]
                  )
                ]
          , streamType =
              fromList [ ( "attribute_0" , V2F ) , ( "attribute_1" , V2F ) ]
          , streamPrimitive = Triangles
          , streamPrograms = [ 1 ]
          }
      ]
  , commands =
      [ SetRenderTarget 2
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 1.0 1.0 0.0 1.0) }
          ]
      , SetProgram 0
      , SetRasterContext
          (TriangleCtx (CullFront CCW) PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetRenderTarget 3
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 1.0 1.0 0.0 1.0) }
          ]
      , SetProgram 0
      , SetRasterContext
          (TriangleCtx (CullFront CCW) PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetRenderTarget 4
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 1.0 1.0 0.0 1.0) }
          ]
      , SetProgram 0
      , SetRasterContext
          (TriangleCtx (CullFront CCW) PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetRenderTarget 1
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 1.0 1.0 0.0 1.0) }
          ]
      , SetProgram 0
      , SetRasterContext
          (TriangleCtx (CullFront CCW) PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetRenderTarget 0
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 0.7 0.7 0.7 1.0) }
          ]
      , SetProgram 5
      , SetRasterContext
          (TriangleCtx CullNone (PolygonLine 0.0) NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 1
      , SetProgram 4
      , SetRasterContext
          (TriangleCtx CullNone PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 1
      , SetProgram 3
      , SetRasterContext
          (TriangleCtx CullNone (PolygonLine 0.0) NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetProgram 2
      , SetSamplerUniform "diffuseTexture" 0
      , SetTexture 1 3
      , SetSamplerUniform "s0" 1
      , SetTexture 2 5
      , SetSamplerUniform "s1" 2
      , SetTexture 3 7
      , SetSamplerUniform "s2" 3
      , SetRasterContext
          (TriangleCtx CullNone PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetProgram 1
      , SetTexture 0 1
      , SetSamplerUniform "s0" 0
      , SetRasterContext
          (TriangleCtx CullNone PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderStream 0
      ]
  }