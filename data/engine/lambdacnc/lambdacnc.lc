identity = M44F r1 r2 r3 r4
  where
    r1 = V4 1 0 0 0
    r2 = V4 0 1 0 0
    r3 = V4 0 0 1 0
    r4 = V4 0 0 0 1

quad size (x, y) = fetchArrays (quadPosition, quadUV)
  where
    l = x - 1
    r = size - 1 + x
    b = y - 1
    t = size - 1 + y

    quadPosition =
      [ V2 l b, V2 r t, V2 l t
      , V2 l b, V2 r b, V2 r t
      ]

    quadUV =
      [ V2 0 0, V2 1 1, V2 0 1
      , V2 0 0, V2 1 0, V2 1 1
      ]

----------------------------------------

aspectRatio screenSize = screenSize%x / screenSize%y

nearPlane = 3000
farPlane = 350000

depthMapSize = V2 1600 1600
texelSize = mapVec (1.0 /) depthMapSize

linearizeDepth depth =
    let
        z = depth * 2.0 - 1.0 -- Back to NDC 
        n = nearPlane
        f = farPlane
    in
    -- (2.0 * n * f) / (f + n - z * (f - n))
    depth / (f/7 - n)
    
cameraPos time = V4 90000 40000 20000 0 -- *! 0.5

cameraMat screenSize time = projection .*. view
  where
    projection = perspective nearPlane farPlane (30 * pi / 180) (aspectRatio screenSize)
    view = lookat (cameraPos time)%xyz (V3 0 0 10000) (V3 0 0 1)

orthographic :: Float
             -> Float
             -> Float
             -> Float
             -> Mat 4 4 Float
orthographic n f t aspect =
    M44F (V4 (2/(r-l))      0              0              0)
         (V4 0              (2/(t-b))      0              0)
         (V4 0              0              (-2/(f-n))     0)
         (V4 (-(r+l)/(r-l)) (-(t+b)/(t-b)) (-(f+n)/(f-n)) 1)
  where
    b = -t
    r = aspect*t
    l = -r

lightMat pos = projection .*. view
  where
    projection = orthographic nearPlane farPlane 50000 (aspectRatio depthMapSize)
    -- projection = perspective nearPlane farPlane 45 (depthMapSize%x / depthMapSize%y)
    view = lookat pos%xyz (V3 0 0 0) (V3 0 0 1)

----------------------------------------

modelMat time =
    -- identity
    -- rotMatrixZ (time * 4)
    rotMatrixZ (pi/2)


positionObject time origPos vertPos =
    V4 vertPos%x vertPos%y vertPos%z 1 + V4 origPos%x origPos%y origPos%z 0


vertObject time screenSize origPos vertPos n lightPos =
    (pos, uvw, normal, fragPos, fragPosLightSpace1, fragPosLightSpace2)
  where
    model = modelMat time

    objPos = positionObject time origPos vertPos

    pos = cameraMat screenSize time *. model *. objPos
    fragPos = model *. objPos
    [fragPosLightSpace1, fragPosLightSpace2] = map (\p -> lightMat p *. fragPos) lightPos
    uvw = vertPos + V3 24000 0 0
    normal = normalize $ model *. (V4 n%x n%y n%z 0)


vertShadow time lightPos origPos vertPos =
    (pos, pos%z * 0.5 + 0.5)
  where
    model = modelMat time

    objPos = positionObject time origPos vertPos

    pos = lightMat lightPos *. model *. objPos

----------------------------------------

diffuseLight fp normal lightPos lightColor =
    let
        lightDir = normalize (lightPos - fp)
        diff = max (dot normal lightDir) 0
        diffuse = lightColor *! diff
    in
    diffuse


shadowCoords lightPos fp lsfp normal offset = (currentDepth, pcfCoords, bias)
  where
    lightDir = normalize (lightPos - fp)

    -- perform perspective divide
    projCoords = (lsfp%xyz /! lsfp%w) *! 0.5 +! 0.5
    -- get depth of current fragment from light's perspective
    currentDepth = projCoords%z

    pcfCoords = projCoords%xy + offset * texelSize
    -- check whether current frag pos is in shadow
    bias = max (0.0005 * (1.0 - (dot normal lightDir))) 0.00005


shadowCalculation lightPos shadowMap fp lsfp normal =
    (/ fromInt (len pcfVecs))
    $ foldl' (\x (currentDepth, pcfCoords, bias) -> 
      let closestDepth = (texture2D shadowMap pcfCoords)%r in
      x + if currentDepth - bias > closestDepth then 0.3 else 1.0) 0
    $ map (shadowCoords lightPos fp lsfp normal) pcfVecs
  where
    pcfVecs = [ V2 0 (0 :: Float)
              -- TODO: figure out how to do this without ending up with 9 samplers.
              -- , V2 (-1) (-1)
              -- , V2 (-1) 0
              -- , V2 (-1) 1
              -- , V2 0 (-1)
              -- , V2 0 1
              -- , V2 1 (-1)
              -- , V2 1 0
              -- , V2 1 1
              ]

diffuseLamp fp normal ((lightColor, lightPos, shadowMap), lsfp) =
       diffuseLight fp normal lightPos lightColor
    *! shadowCalculation lightPos shadowMap fp lsfp normal

fragObject time textureMap fp uv normal lights =
    result
  where
    objectColor = textureMap (uv%xy *! 0.000025)

    diffuse = foldl' (+) zero $ map (diffuseLamp fp normal) lights

    result = (diffuse /! 1.2) * objectColor

----------------------------------------

-- Roughly put the light emitter in the center of the bulb by moving the bulb's
-- sphere up (in Z direction).
bulbOffset = V4 0 0 4200 0

vertBulb screenSize time vertPos n lightPos =
    let
        objPos = rotMatrixX (-pi/2) *. scale 200 (V4 vertPos%x vertPos%y vertPos%z 0) + lightPos + bulbOffset
        pos = cameraMat screenSize time *. objPos
    in
    (pos, n)

----------------------------------------

makeObjects screenSize time position texture objects exposure lights =
    -- objectsWireFrame:
    [objectsSurfaces]
  where
    lightPos (_, p, _) = p

    objectsWireFrame = objects
      & mapPrimitives (\((pos,n)) -> vertObject time screenSize position pos n (map lightPos lights))
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 0) NoOffset LastVertex) (Smooth, Smooth, Smooth, Smooth, Smooth)
      & mapFragments (\((_,_,_,_,_)) -> ((V4 0 0 0 0.5)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    objectsSurfaces = objects
      & mapPrimitives (\((pos,n)) -> vertObject time screenSize position pos n (map lightPos lights))
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth, Smooth, Smooth, Smooth)
      & mapFragments (\((uv,n,fp,lsfp1,lsfp2)) -> ((fragObject time textureMap fp uv n (zip lights [lsfp1, lsfp2]) *! exposure)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    textureMap = texture2D (Sampler LinearFilter ClampToEdge texture)

makeScene screenSize time position index texture objects bulbs exposure lights
    = foldl' overlay (imageFrame (emptyDepthImage 1, emptyColorImage (V4 0.7 0.7 0.7 1))) $
    (makeObjects screenSize time position texture objects exposure lights) ++
    [ bulbsWireFrame
    , bulbsSurfaces
    ] ++ map (\(i, (_, _, shadowMap)) -> showTextureOn (quad 0.25 (0.25 * i, 0)) shadowMap) (zip [0..10] lights)
  where
    [(lightColor1, lightPos1, _), (lightColor2, lightPos2, _)] = lights
    
    lightPos = if not (index /= 0) then lightPos1 else lightPos2
    lightColor = if index < 1 then lightColor1 else lightColor2

    bulbsWireFrame = bulbs
      & mapPrimitives (\((pos,n)) -> vertBulb screenSize time pos n lightPos)
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 1) NoOffset LastVertex) ((Smooth))
      & mapFragments (\((_)) -> ((black)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    bulbsSurfaces = bulbs
      & mapPrimitives (\((pos,n)) -> vertBulb screenSize time pos n lightPos)
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) ((Smooth))
      & mapFragments (\((_)) -> ((lightColor *! exposure)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))


makeShadowMap time position objects lightPos
    = imageFrame (emptyDepthImage 1, emptyColorImage (V4 1 1 0 1))
  `overlay` objectsSurfaces
  where
    objectsSurfaces = objects
      & mapPrimitives (\((pos,_)) -> vertShadow time lightPos position pos)
      & rasterizePrimitives (TriangleCtx CullFront PolygonFill NoOffset LastVertex) ((Smooth))
      & mapFragments (\((z)) -> fragColor z)
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    fragColor z = 
      -- let c = linearizeDepth z in
      let c = z in
      ((V4 c c c 1))


showTextureOn (prims :: PrimitiveStream Triangle (Vec 2 Float, Vec 2 Float))
              (texture :: Sampler)
    = prims
    & mapPrimitives (\(p, uv) -> (V4 p%x p%y (-1) 1, uv))
    & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) ((Smooth))
    & mapFragments (\((uv)) -> ((texture2D texture uv)))
    & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True)) 


showTexture texture = imageFrame (emptyDepthImage 1, emptyColorImage (V4 0 0 0.4 1))
  `overlay`
    showTextureOn (quad 2 (0, 0)) texture


makeFrame (screenSize :: Vec 2 Float)
          (time :: Float)
          (position :: Vec 3 Float)
          (index :: Int)
          (texture :: Texture)
          (objects :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
          (bulbs :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float)) =
    makeScene
        screenSize
        time
        position
        index
        texture
        objects
        bulbs
        exposure
        (zip3 lightColor lightPos shadowMap)
  where
    exposure = 1.0

    lightPos = [getLightPos1 time, getLightPos2 time]
    lightColor = [V4 10 10 10 1.0, V4 0 0 0 1.0]

    shadowMap = map (Sampler LinearFilter ClampToEdge . Texture2D depthMapSize . PrjImageColor) shadowMapFrame
    shadowMapFrame = map (makeShadowMap time position objects) lightPos

    -- lightPos time = rotMatrixZ (time*8) *. V4 (80000) (10000) (40000) 1
    -- getLightPos1 time = rotMatrixZ (time*8) *. V4 (80000) (10000) (40000) 1
    -- getLightPos2 time = rotMatrixZ (time*2) *. V4 (80000) (10000) (40000) 1
    -- getLightPos1 time = rotMatrixZ (pi/8*15) *. V4 (80000) (10000) (40000) 1
    -- getLightPos2 time = rotMatrixZ (pi/8*6) *. V4 (80000) (10000) (40000) 1
    getLightPos1 time = rotMatrixZ (pi/10*(-7)) *. V4 100000 1000 30000 1
    getLightPos2 time = rotMatrixZ (pi/10*(-7)) *. V4 100000 1000 30000 1


main = renderFrame $ makeFrame
    (Uniform "screenSize")
    (Uniform "time" / 10)
    (Uniform "position")
    (Uniform "index")
    (Texture2DSlot "diffuseTexture")
    (fetch "objects" (Attribute "position", Attribute "normal"))
    (fetch "lights" (Attribute "position", Attribute "normal"))
