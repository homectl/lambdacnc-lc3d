identity = M44F r1 r2 r3 r4
  where
    r1 = V4 1 0 0 0
    r2 = V4 0 1 0 0
    r3 = V4 0 0 1 0
    r4 = V4 0 0 0 1

----------------------------------------

cameraPos = V4 0 (-100000) 50000 1
lightPos = V4 (10000) 0 50000 1

----------------------------------------

vertObject time objPos vertPos n =
    let
        projection = perspective 10000 300000 45 1.5
        view = lookat cameraPos%xyz (V3 0 0 0) (V3 0 0 1)
        model = identity -- rotMatrixZ time
    in

    let
      aPos = V4 vertPos%x vertPos%y vertPos%z 1 + V4 objPos%x objPos%y objPos%z 0
      pos = projection *. view *. model *. aPos
      fragPos = model *. aPos
    in
    (pos, fragPos, n)

----------------------------------------

diffuseLight fp n lightPos lightColor =
    let
      norm = normalize n
      lightDir = (normalize (lightPos - fp))%xyz
      diff = max (dot norm lightDir) 0
      diffuse = lightColor *! diff
    in
    diffuse

fragObject time texture fp n =
    let
      diffuse = diffuseLight fp n lightPos (V3 2.0 2.0 2.0)
              -- + diffuseLight fp n (V4 0 0 20000 1) (V3 1.0 1.0 1.0) *! 0.5
              -- + diffuseLight fp n (V4 0 50000 0 1) (V3 1.0 1.0 1.0) *! 0.5
              -- + diffuseLight fp n (V4 50000 0 0 1) (V3 1.0 1.0 1.0) *! 0.5
      objectColor = V3 0.8 0.8 0.8
      result = diffuse * objectColor
    in
    V4 result%x result%y result%z 1

----------------------------------------

vertBulb time objPos vertPos n = vertObject time objPos (rotMatrixX (-pi/2) *. scale 200 (V4 vertPos%x vertPos%y vertPos%z 1) + lightPos)%xyz n

----------------------------------------

----------------------------------------

makeFrame (time :: Float)
          (position :: Vec 3 Float)
          (texture :: Texture)
          (objects :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
          (lights :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
    = imageFrame (emptyDepthImage 1, emptyColorImage (V4 0.7 0.7 0.7 1))
  `overlay` bulbsWireFrame
  `overlay` bulbsSurfaces
  `overlay` objectsWireFrame
  `overlay` objectsSurfaces
  where
    bulbsWireFrame = lights
      & mapPrimitives (\((pos,n)) -> vertBulb time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 0) NoOffset LastVertex) (Smooth, Smooth)
      & mapFragments (\((_,_)) -> ((black)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    bulbsSurfaces = lights
      & mapPrimitives (\((pos,n)) -> vertBulb time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth)
      & mapFragments (\((_,_)) -> ((white)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    objectsWireFrame = objects
      & mapPrimitives (\((pos,n)) -> vertObject time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 0) NoOffset LastVertex) (Smooth, Smooth)
      & mapFragments (\((_,_)) -> ((black)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    objectsSurfaces = objects
      & mapPrimitives (\((pos,n)) -> vertObject time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth)
      & mapFragments (\((fp,n)) -> ((fragObject time texture fp n)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))


main = renderFrame $
   makeFrame (Uniform "time" / 10)
             (Uniform "position")
             (Texture2DSlot "diffuseTexture")
             (fetch "objects" (Attribute "position", Attribute "normal"))
             (fetch "lights" (Attribute "position", Attribute "normal"))
