----------------------------------------

cameraTransform =
        perspective 10000 300000 45 1.5
    .*. lookat (V3 (-50000) 30000 70000) (V3 (34000) (20000) (-50000)) (V3 0 1 0)

vert time objPos vertPos n =
    let
        projection = perspective 10000 300000 45 1.5
        view = lookat (V3 (-50000) 30000 70000) (V3 (34000) (20000) (-50000)) (V3 0 1 0)
        model = rotMatrixY time
            .*. rotMatrixX (-pi/2)
            .*. rotMatrixZ (-pi/2)
    in

    let
      uvw = V4 vertPos%x vertPos%y vertPos%z 0
      aPos = V4 objPos%x objPos%y objPos%z 1 + uvw
      pos = projection *. view *. model *. aPos
      fragPos = model *. aPos
    in
    (pos, uvw, fragPos, n)

----------------------------------------

lightPos = V4 30000 30000 70000 1
lightColor = V3 1.0 1.0 1.0

frag time texture uv fp n =
    let
      norm = normalize n
      lightDir = (normalize ((rotMatrixZ (-time * 4) *. lightPos) - fp))%xyz
      diff = max (dot norm lightDir) 0.0
      diffuse = lightColor *! diff
      objectColor = V3 0.8 0.8 0.8
      result = diffuse * objectColor
    in
    V4 result%x result%y result%z 1

----------------------------------------

makeFrame (time :: Float)
          (position :: Vec 3 Float)
          (texture :: Texture)
          (prims :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
    = imageFrame (emptyDepthImage 1, emptyColorImage (V4 0.7 0.7 0.7 1))
  `overlay` wireFrame
  `overlay` surfaces
  where
    wireFrame = prims
      & mapPrimitives (\((pos,n)) -> vert time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 0) NoOffset LastVertex) (Smooth, Smooth, Smooth)
      & mapFragments (\((uv,_,_)) -> ((black)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    surfaces = prims
      & mapPrimitives (\((pos,n)) -> vert time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth, Smooth)
      & mapFragments (\((uv,fp,n)) -> ((frag time texture uv fp n)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))


main = renderFrame $
   makeFrame (Uniform "time" / 10)
             (Uniform "position")
             (Texture2DSlot "diffuseTexture")
             (fetch "objects" (Attribute "position", Attribute "normal"))
