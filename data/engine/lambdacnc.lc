identity = M44F r1 r2 r3 r4
  where
    r1 = V4 1 0 0 0
    r2 = V4 0 1 0 0
    r3 = V4 0 0 1 0
    r4 = V4 0 0 0 1

----------------------------------------

lightPos = V4 (10000) (10000) (14000) 1
cameraPos = V4 0 80000 44000 0

projmat = projection .*. view
  where
    projection = perspective 10000 300000 45 1.75
    view = lookat cameraPos%xyz (V3 0 0 0) (V3 0 0 1)

----------------------------------------

vertObject time objPos vertPos n =
    let
        -- model = identity
        -- model = rotMatrixZ (time * 4)
        model = rotMatrixZ (pi/4*3)
    in

    let
        aPos = V4 vertPos%x vertPos%y vertPos%z 1 + V4 objPos%x objPos%y objPos%z 0
        pos = projmat *. model *. aPos
        fragPos = model *. aPos
        normal = normalize $ model *. (V4 n%x n%y n%z 0)
    in
    (pos, fragPos, normal)

----------------------------------------

diffuseLight fp n lightPos lightColor =
    let
        lightDir = normalize (lightPos - fp)
        diff = max (dot n lightDir) 0
        diffuse = lightColor *! diff
    in
    diffuse

fragObject time texture fp n =
    let
        diffuse = diffuseLight fp n lightPos (V3 2.0 2.0 2.0)
                -- + diffuseLight fp n (V4 0 0 20000 1) (V3 1.0 1.0 1.0) *! 0.5
                -- + diffuseLight fp n (V4 0 50000 0 1) (V3 1.0 1.0 1.0) *! 0.5
                -- + diffuseLight fp n (V4 50000 0 0 1) (V3 1.0 1.0 1.0) *! 0.5
        objectColor = V3 0.8 0.8 0.8
        result = diffuse * objectColor
    in
    V4 result%x result%y result%z 1

----------------------------------------

-- Roughly put the light emitter in the center of the bulb by moving the bulb's
-- sphere up (in Z direction).
bulbOffset = V4 0 0 4200 0

vertBulb time objPos vertPos n =
    let
        aPos = rotMatrixX (-pi/2) *. scale 200 (V4 vertPos%x vertPos%y vertPos%z 0) + lightPos + bulbOffset
        pos = projmat *. aPos
    in
    (pos, n)

----------------------------------------

makeFrame (time :: Float)
          (position :: Vec 3 Float)
          (texture :: Texture)
          (objects :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
          (lights :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
    = imageFrame (emptyDepthImage 1, emptyColorImage (V4 0.7 0.7 0.7 1))
  `overlay` bulbsWireFrame
  `overlay` bulbsSurfaces
  `overlay` objectsWireFrame
  `overlay` objectsSurfaces
  where
    bulbsWireFrame = lights
      & mapPrimitives (\((pos,n)) -> vertBulb time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 0) NoOffset LastVertex) ((Smooth))
      & mapFragments (\((_)) -> ((black)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    bulbsSurfaces = lights
      & mapPrimitives (\((pos,n)) -> vertBulb time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) ((Smooth))
      & mapFragments (\((_)) -> ((white)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    objectsWireFrame = objects
      & mapPrimitives (\((pos,n)) -> vertObject time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone (PolygonLine 0) NoOffset LastVertex) (Smooth, Smooth)
      & mapFragments (\((_,_)) -> ((black)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    objectsSurfaces = objects
      & mapPrimitives (\((pos,n)) -> vertObject time position pos n)
      & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth)
      & mapFragments (\((fp,n)) -> ((fragObject time texture fp n)))
      & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))


main = renderFrame $
   makeFrame (Uniform "time" / 10)
             (Uniform "position")
             (Texture2DSlot "diffuseTexture")
             (fetch "objects" (Attribute "position", Attribute "normal"))
             (fetch "lights" (Attribute "position", Attribute "normal"))
